package ofctl

/*

const struct ovs_cmdl_command *get_all_commands(void);

const struct ovs_cmdl_command all_commands[] = {
    { "show", "switch",
      1, 1, ofctl_show, OVS_RO },
    { "monitor", "switch [misslen] [invalid_ttl] [watch:[...]]",
      1, 3, ofctl_monitor, OVS_RO },
    { "snoop", "switch",
      1, 1, ofctl_snoop, OVS_RO },
    { "dump-desc", "switch",
      1, 1, ofctl_dump_desc, OVS_RO },
    { "dump-tables", "switch",
      1, 1, ofctl_dump_tables, OVS_RO },
    { "dump-table-features", "switch",
      1, 1, ofctl_dump_table_features, OVS_RO },
    { "dump-table-desc", "switch",
      1, 1, ofctl_dump_table_desc, OVS_RO },
    { "dump-flows", "switch",
      1, 2, ofctl_dump_flows, OVS_RO },
    { "dump-aggregate", "switch",
      1, 2, ofctl_dump_aggregate, OVS_RO },
    { "queue-stats", "switch [port [queue]]",
      1, 3, ofctl_queue_stats, OVS_RO },
    { "queue-get-config", "switch [port [queue]]",
      1, 3, ofctl_queue_get_config, OVS_RO },
    { "add-flow", "switch flow",
      2, 2, ofctl_add_flow, OVS_RW },
    { "add-flows", "switch file",
      2, 2, ofctl_add_flows, OVS_RW },
    { "mod-flows", "switch flow",
      2, 2, ofctl_mod_flows, OVS_RW },
    { "del-flows", "switch [flow]",
      1, 2, ofctl_del_flows, OVS_RW },
    { "replace-flows", "switch file",
      2, 2, ofctl_replace_flows, OVS_RW },
    { "diff-flows", "source1 source2",
      2, 2, ofctl_diff_flows, OVS_RW },
    { "add-meter", "switch meter",
      2, 2, ofctl_add_meter, OVS_RW },
    { "mod-meter", "switch meter",
      2, 2, ofctl_mod_meter, OVS_RW },
    { "del-meter", "switch meter",
      1, 2, ofctl_del_meters, OVS_RW },
    { "del-meters", "switch",
      1, 2, ofctl_del_meters, OVS_RW },
    { "dump-meter", "switch meter",
      1, 2, ofctl_dump_meters, OVS_RO },
    { "dump-meters", "switch",
      1, 2, ofctl_dump_meters, OVS_RO },
    { "meter-stats", "switch [meter]",
      1, 2, ofctl_meter_stats, OVS_RO },
    { "meter-features", "switch",
      1, 1, ofctl_meter_features, OVS_RO },
    { "packet-out", "switch \"in_port=<port> packet=<hex data> actions=...\"",
      2, INT_MAX, ofctl_packet_out, OVS_RW },
    { "dump-ports", "switch [port]",
      1, 2, ofctl_dump_ports, OVS_RO },
    { "dump-ports-desc", "switch [port]",
      1, 2, ofctl_dump_ports_desc, OVS_RO },
    { "mod-port", "switch iface act",
      3, 3, ofctl_mod_port, OVS_RW },
    { "mod-table", "switch mod",
      3, 3, ofctl_mod_table, OVS_RW },
    { "get-frags", "switch",
      1, 1, ofctl_get_frags, OVS_RO },
    { "set-frags", "switch frag_mode",
      2, 2, ofctl_set_frags, OVS_RW },
    { "probe", "target",
      1, 1, ofctl_probe, OVS_RO },
    { "ping", "target [n]",
      1, 2, ofctl_ping, OVS_RO },
    { "benchmark", "target n count",
      3, 3, ofctl_benchmark, OVS_RO },

    { "dump-ipfix-bridge", "switch",
      1, 1, ofctl_dump_ipfix_bridge, OVS_RO },
    { "dump-ipfix-flow", "switch",
      1, 1, ofctl_dump_ipfix_flow, OVS_RO },

    { "ct-flush-zone", "switch zone",
      2, 2, ofctl_ct_flush_zone, OVS_RW },

    { "ct-flush", "switch [zone=N] [mark=X[/M]] [labels=Y[/N]] "
                  "[ct-orig-tuple [ct-reply-tuple]]",
      1, 6, ofctl_ct_flush, OVS_RW },

    { "ofp-parse", "file",
      1, 1, ofctl_ofp_parse, OVS_RW },
    { "ofp-parse-pcap", "pcap",
      1, INT_MAX, ofctl_ofp_parse_pcap, OVS_RW },

    { "add-group", "switch group",
      1, 2, ofctl_add_group, OVS_RW },
    { "add-groups", "switch file",
      2, 2, ofctl_add_groups, OVS_RW },
    { "mod-group", "switch group",
      1, 2, ofctl_mod_group, OVS_RW },
    { "del-groups", "switch [group]",
      1, 2, ofctl_del_groups, OVS_RW },
    { "insert-buckets", "switch [group]",
      1, 2, ofctl_insert_bucket, OVS_RW },
    { "remove-buckets", "switch [group]",
      1, 2, ofctl_remove_bucket, OVS_RW },
    { "dump-groups", "switch [group]",
      1, 2, ofctl_dump_group_desc, OVS_RO },
    { "dump-group-stats", "switch [group]",
      1, 2, ofctl_dump_group_stats, OVS_RO },
    { "dump-group-features", "switch",
      1, 1, ofctl_dump_group_features, OVS_RO },

    { "bundle", "switch file",
      2, 2, ofctl_bundle, OVS_RW },

    { "add-tlv-map", "switch map",
      2, 2, ofctl_add_tlv_map, OVS_RO },
    { "del-tlv-map", "switch [map]",
      1, 2, ofctl_del_tlv_map, OVS_RO },
    { "dump-tlv-map", "switch",
      1, 1, ofctl_dump_tlv_map, OVS_RO },
    { "help", NULL, 0, INT_MAX, ofctl_help, OVS_RO },
    { "list-commands", NULL, 0, INT_MAX, ofctl_list_commands, OVS_RO },

    // Undocumented commands for testing. //
	{ "parse-flow", NULL, 1, 1, ofctl_parse_flow, OVS_RW },
	{ "parse-flows", NULL, 1, 1, ofctl_parse_flows, OVS_RW },
	{ "parse-group", NULL, 1, 1, ofctl_parse_group, OVS_RW },
	{ "parse-nx-match", NULL, 0, 0, ofctl_parse_nxm, OVS_RW },
	{ "parse-nxm", NULL, 0, 0, ofctl_parse_nxm, OVS_RW },
	{ "parse-oxm", NULL, 1, 1, ofctl_parse_oxm, OVS_RW },
	{ "parse-actions", NULL, 1, 1, ofctl_parse_actions, OVS_RW },
	{ "parse-instructions", NULL, 1, 1, ofctl_parse_instructions, OVS_RW },
	{ "parse-ofp10-match", NULL, 0, 0, ofctl_parse_ofp10_match, OVS_RW },
	{ "parse-ofp11-match", NULL, 0, 0, ofctl_parse_ofp11_match, OVS_RW },
	{ "parse-pcap", NULL, 1, INT_MAX, ofctl_parse_pcap, OVS_RW },
	{ "check-vlan", NULL, 2, 2, ofctl_check_vlan, OVS_RW },
	{ "print-error", NULL, 1, 1, ofctl_print_error, OVS_RW },
	{ "encode-error-reply", NULL, 2, 2, ofctl_encode_error_reply, OVS_RW },
	{ "ofp-print", NULL, 1, 2, ofctl_ofp_print, OVS_RW },
	{ "encode-hello", NULL, 1, 1, ofctl_encode_hello, OVS_RW },
	{ "parse-key-value", NULL, 1, INT_MAX, ofctl_parse_key_value, OVS_RW },
	{ "compose-packet", NULL, 1, 2, ofctl_compose_packet, OVS_RO },
	{ "parse-packet", NULL, 0, 0, ofctl_parse_packet, OVS_RO },

	{ NULL, NULL, 0, 0, NULL, OVS_RO },
};

const struct ovs_cmdl_command *get_all_commands(void)
{
    return all_commands;
}
*/
import "C"
